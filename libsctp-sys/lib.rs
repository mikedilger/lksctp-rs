/* automatically generated by rust-bindgen */

pub type __u8 = ::libc::c_uchar;
pub type uint8_t = ::libc::c_uchar;
pub type __s32 = ::libc::c_int;
pub type __u32 = ::libc::c_uint;
pub type uint32_t = ::libc::c_uint;
pub type __u64 = ::libc::c_ulong;
pub type __u16 = ::libc::c_ushort;
pub type uint16_t = ::libc::c_ushort;
pub type sa_family_t = ::libc::c_ushort;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_align: ::libc::c_ulong,
    pub __ss_padding: [::libc::c_char; 112us],
}
impl ::std::default::Default for Struct_sockaddr_storage {
    fn default() -> Struct_sockaddr_storage {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type socklen_t = __u32;
pub type size_t = ::libc::c_ulong;
pub type sctp_assoc_t = __s32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_initmsg {
    pub sinit_num_ostreams: __u16,
    pub sinit_max_instreams: __u16,
    pub sinit_max_attempts: __u16,
    pub sinit_max_init_timeo: __u16,
}
impl ::std::default::Default for Struct_sctp_initmsg {
    fn default() -> Struct_sctp_initmsg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_sndrcvinfo {
    pub sinfo_stream: __u16,
    pub sinfo_ssn: __u16,
    pub sinfo_flags: __u16,
    pub sinfo_ppid: __u32,
    pub sinfo_context: __u32,
    pub sinfo_timetolive: __u32,
    pub sinfo_tsn: __u32,
    pub sinfo_cumtsn: __u32,
    pub sinfo_assoc_id: sctp_assoc_t,
}
impl ::std::default::Default for Struct_sctp_sndrcvinfo {
    fn default() -> Struct_sctp_sndrcvinfo { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_sctp_sinfo_flags = ::libc::c_uint;
pub const SCTP_UNORDERED: ::libc::c_uint = 1;
pub const SCTP_ADDR_OVER: ::libc::c_uint = 2;
pub const SCTP_ABORT: ::libc::c_uint = 4;
pub const SCTP_SACK_IMMEDIATELY: ::libc::c_uint = 8;
pub const SCTP_EOF: ::libc::c_uint = 512;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u32; 8us],
}
impl Union_Unnamed1 {
    pub unsafe fn raw(&mut self) -> *mut __u8 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn init(&mut self) -> *mut Struct_sctp_initmsg {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sndrcv(&mut self) -> *mut Struct_sctp_sndrcvinfo {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Union_Unnamed1 { unsafe { ::std::mem::zeroed() } }
}
pub type sctp_cmsg_data_t = Union_Unnamed1;
pub type Enum_sctp_cmsg_type = ::libc::c_uint;
pub const SCTP_INIT: ::libc::c_uint = 0;
pub const SCTP_SNDRCV: ::libc::c_uint = 1;
pub type sctp_cmsg_t = Enum_sctp_cmsg_type;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_assoc_change {
    pub sac_type: __u16,
    pub sac_flags: __u16,
    pub sac_length: __u32,
    pub sac_state: __u16,
    pub sac_error: __u16,
    pub sac_outbound_streams: __u16,
    pub sac_inbound_streams: __u16,
    pub sac_assoc_id: sctp_assoc_t,
    pub sac_info: [__u8; 0us],
}
impl ::std::default::Default for Struct_sctp_assoc_change {
    fn default() -> Struct_sctp_assoc_change {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_sctp_sac_state = ::libc::c_uint;
pub const SCTP_COMM_UP: ::libc::c_uint = 0;
pub const SCTP_COMM_LOST: ::libc::c_uint = 1;
pub const SCTP_RESTART: ::libc::c_uint = 2;
pub const SCTP_SHUTDOWN_COMP: ::libc::c_uint = 3;
pub const SCTP_CANT_STR_ASSOC: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_paddr_change {
    pub spc_type: __u16,
    pub spc_flags: __u16,
    pub spc_length: __u32,
    pub spc_aaddr: Struct_sockaddr_storage,
    pub spc_state: ::libc::c_int,
    pub spc_error: ::libc::c_int,
    pub spc_assoc_id: sctp_assoc_t,
}
impl ::std::default::Default for Struct_sctp_paddr_change {
    fn default() -> Struct_sctp_paddr_change {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_sctp_spc_state = ::libc::c_uint;
pub const SCTP_ADDR_AVAILABLE: ::libc::c_uint = 0;
pub const SCTP_ADDR_UNREACHABLE: ::libc::c_uint = 1;
pub const SCTP_ADDR_REMOVED: ::libc::c_uint = 2;
pub const SCTP_ADDR_ADDED: ::libc::c_uint = 3;
pub const SCTP_ADDR_MADE_PRIM: ::libc::c_uint = 4;
pub const SCTP_ADDR_CONFIRMED: ::libc::c_uint = 5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_remote_error {
    pub sre_type: __u16,
    pub sre_flags: __u16,
    pub sre_length: __u32,
    pub sre_error: __u16,
    pub sre_assoc_id: sctp_assoc_t,
    pub sre_data: [__u8; 0us],
}
impl ::std::default::Default for Struct_sctp_remote_error {
    fn default() -> Struct_sctp_remote_error {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_send_failed {
    pub ssf_type: __u16,
    pub ssf_flags: __u16,
    pub ssf_length: __u32,
    pub ssf_error: __u32,
    pub ssf_info: Struct_sctp_sndrcvinfo,
    pub ssf_assoc_id: sctp_assoc_t,
    pub ssf_data: [__u8; 0us],
}
impl ::std::default::Default for Struct_sctp_send_failed {
    fn default() -> Struct_sctp_send_failed {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_sctp_ssf_flags = ::libc::c_uint;
pub const SCTP_DATA_UNSENT: ::libc::c_uint = 0;
pub const SCTP_DATA_SENT: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_shutdown_event {
    pub sse_type: __u16,
    pub sse_flags: __u16,
    pub sse_length: __u32,
    pub sse_assoc_id: sctp_assoc_t,
}
impl ::std::default::Default for Struct_sctp_shutdown_event {
    fn default() -> Struct_sctp_shutdown_event {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_adaptation_event {
    pub sai_type: __u16,
    pub sai_flags: __u16,
    pub sai_length: __u32,
    pub sai_adaptation_ind: __u32,
    pub sai_assoc_id: sctp_assoc_t,
}
impl ::std::default::Default for Struct_sctp_adaptation_event {
    fn default() -> Struct_sctp_adaptation_event {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_pdapi_event {
    pub pdapi_type: __u16,
    pub pdapi_flags: __u16,
    pub pdapi_length: __u32,
    pub pdapi_indication: __u32,
    pub pdapi_assoc_id: sctp_assoc_t,
}
impl ::std::default::Default for Struct_sctp_pdapi_event {
    fn default() -> Struct_sctp_pdapi_event {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const SCTP_PARTIAL_DELIVERY_ABORTED: ::libc::c_uint = 0;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_authkey_event {
    pub auth_type: __u16,
    pub auth_flags: __u16,
    pub auth_length: __u32,
    pub auth_keynumber: __u16,
    pub auth_altkeynumber: __u16,
    pub auth_indication: __u32,
    pub auth_assoc_id: sctp_assoc_t,
}
impl ::std::default::Default for Struct_sctp_authkey_event {
    fn default() -> Struct_sctp_authkey_event {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const SCTP_AUTH_NEWKEY: ::libc::c_uint = 0;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_sender_dry_event {
    pub sender_dry_type: __u16,
    pub sender_dry_flags: __u16,
    pub sender_dry_length: __u32,
    pub sender_dry_assoc_id: sctp_assoc_t,
}
impl ::std::default::Default for Struct_sctp_sender_dry_event {
    fn default() -> Struct_sctp_sender_dry_event {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_event_subscribe {
    pub sctp_data_io_event: __u8,
    pub sctp_association_event: __u8,
    pub sctp_address_event: __u8,
    pub sctp_send_failure_event: __u8,
    pub sctp_peer_error_event: __u8,
    pub sctp_shutdown_event: __u8,
    pub sctp_partial_delivery_event: __u8,
    pub sctp_adaptation_layer_event: __u8,
    pub sctp_authentication_event: __u8,
    pub sctp_sender_dry_event: __u8,
}
impl ::std::default::Default for Struct_sctp_event_subscribe {
    fn default() -> Struct_sctp_event_subscribe {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_sctp_notification {
    pub _bindgen_data_: [u32; 37us],
}
impl Union_sctp_notification {
    pub unsafe fn sn_header(&mut self) -> *mut Struct_Unnamed4 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sn_assoc_change(&mut self)
     -> *mut Struct_sctp_assoc_change {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sn_paddr_change(&mut self)
     -> *mut Struct_sctp_paddr_change {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sn_remote_error(&mut self)
     -> *mut Struct_sctp_remote_error {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sn_send_failed(&mut self) -> *mut Struct_sctp_send_failed {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sn_shutdown_event(&mut self)
     -> *mut Struct_sctp_shutdown_event {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sn_adaptation_event(&mut self)
     -> *mut Struct_sctp_adaptation_event {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sn_pdapi_event(&mut self) -> *mut Struct_sctp_pdapi_event {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sn_authkey_event(&mut self)
     -> *mut Struct_sctp_authkey_event {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sn_sender_dry_event(&mut self)
     -> *mut Struct_sctp_sender_dry_event {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_sctp_notification {
    fn default() -> Union_sctp_notification {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub sn_type: __u16,
    pub sn_flags: __u16,
    pub sn_length: __u32,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Struct_Unnamed4 { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_sctp_sn_type = ::libc::c_uint;
pub const SCTP_SN_TYPE_BASE: ::libc::c_uint = 32768;
pub const SCTP_ASSOC_CHANGE: ::libc::c_uint = 32769;
pub const SCTP_PEER_ADDR_CHANGE: ::libc::c_uint = 32770;
pub const SCTP_SEND_FAILED: ::libc::c_uint = 32771;
pub const SCTP_REMOTE_ERROR: ::libc::c_uint = 32772;
pub const SCTP_SHUTDOWN_EVENT: ::libc::c_uint = 32773;
pub const SCTP_PARTIAL_DELIVERY_EVENT: ::libc::c_uint = 32774;
pub const SCTP_ADAPTATION_INDICATION: ::libc::c_uint = 32775;
pub const SCTP_AUTHENTICATION_INDICATION: ::libc::c_uint = 32776;
pub const SCTP_SENDER_DRY_EVENT: ::libc::c_uint = 32777;
pub type Enum_sctp_sn_error = ::libc::c_uint;
pub const SCTP_FAILED_THRESHOLD: ::libc::c_uint = 0;
pub const SCTP_RECEIVED_SACK: ::libc::c_uint = 1;
pub const SCTP_HEARTBEAT_SUCCESS: ::libc::c_uint = 2;
pub const SCTP_RESPONSE_TO_USER_REQ: ::libc::c_uint = 3;
pub const SCTP_INTERNAL_ERROR: ::libc::c_uint = 4;
pub const SCTP_SHUTDOWN_GUARD_EXPIRES: ::libc::c_uint = 5;
pub const SCTP_PEER_FAULTY: ::libc::c_uint = 6;
pub type sctp_sn_error_t = Enum_sctp_sn_error;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_rtoinfo {
    pub srto_assoc_id: sctp_assoc_t,
    pub srto_initial: __u32,
    pub srto_max: __u32,
    pub srto_min: __u32,
}
impl ::std::default::Default for Struct_sctp_rtoinfo {
    fn default() -> Struct_sctp_rtoinfo { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_assocparams {
    pub sasoc_assoc_id: sctp_assoc_t,
    pub sasoc_asocmaxrxt: __u16,
    pub sasoc_number_peer_destinations: __u16,
    pub sasoc_peer_rwnd: __u32,
    pub sasoc_local_rwnd: __u32,
    pub sasoc_cookie_life: __u32,
}
impl ::std::default::Default for Struct_sctp_assocparams {
    fn default() -> Struct_sctp_assocparams {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_setpeerprim {
    pub sspp_assoc_id: sctp_assoc_t,
    pub sspp_addr: Struct_sockaddr_storage,
}
impl ::std::default::Default for Struct_sctp_setpeerprim {
    fn default() -> Struct_sctp_setpeerprim {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_setprim {
    pub ssp_assoc_id: sctp_assoc_t,
    pub ssp_addr: Struct_sockaddr_storage,
}
impl ::std::default::Default for Struct_sctp_setprim {
    fn default() -> Struct_sctp_setprim { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_setadaptation {
    pub ssb_adaptation_ind: __u32,
}
impl ::std::default::Default for Struct_sctp_setadaptation {
    fn default() -> Struct_sctp_setadaptation {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_sctp_spp_flags = ::libc::c_uint;
pub const SPP_HB_ENABLE: ::libc::c_uint = 1;
pub const SPP_HB_DISABLE: ::libc::c_uint = 2;
pub const SPP_HB: ::libc::c_uint = 3;
pub const SPP_HB_DEMAND: ::libc::c_uint = 4;
pub const SPP_PMTUD_ENABLE: ::libc::c_uint = 8;
pub const SPP_PMTUD_DISABLE: ::libc::c_uint = 16;
pub const SPP_PMTUD: ::libc::c_uint = 24;
pub const SPP_SACKDELAY_ENABLE: ::libc::c_uint = 32;
pub const SPP_SACKDELAY_DISABLE: ::libc::c_uint = 64;
pub const SPP_SACKDELAY: ::libc::c_uint = 96;
pub const SPP_HB_TIME_IS_ZERO: ::libc::c_uint = 128;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_paddrparams {
    pub spp_assoc_id: sctp_assoc_t,
    pub spp_address: Struct_sockaddr_storage,
    pub spp_hbinterval: __u32,
    pub spp_pathmaxrxt: __u16,
    pub spp_pathmtu: __u32,
    pub spp_sackdelay: __u32,
    pub spp_flags: __u32,
}
impl ::std::default::Default for Struct_sctp_paddrparams {
    fn default() -> Struct_sctp_paddrparams {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_authchunk {
    pub sauth_chunk: __u8,
}
impl ::std::default::Default for Struct_sctp_authchunk {
    fn default() -> Struct_sctp_authchunk { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const SCTP_AUTH_HMAC_ID_SHA1: ::libc::c_uint = 1;
pub const SCTP_AUTH_HMAC_ID_SHA256: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_hmacalgo {
    pub shmac_number_of_idents: __u32,
    pub shmac_idents: *mut __u16,
}
impl ::std::default::Default for Struct_sctp_hmacalgo {
    fn default() -> Struct_sctp_hmacalgo { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_authkey {
    pub sca_assoc_id: sctp_assoc_t,
    pub sca_keynumber: __u16,
    pub sca_keylength: __u16,
    pub sca_key: *mut __u8,
}
impl ::std::default::Default for Struct_sctp_authkey {
    fn default() -> Struct_sctp_authkey { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_authkeyid {
    pub scact_assoc_id: sctp_assoc_t,
    pub scact_keynumber: __u16,
}
impl ::std::default::Default for Struct_sctp_authkeyid {
    fn default() -> Struct_sctp_authkeyid { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_sack_info {
    pub sack_assoc_id: sctp_assoc_t,
    pub sack_delay: uint32_t,
    pub sack_freq: uint32_t,
}
impl ::std::default::Default for Struct_sctp_sack_info {
    fn default() -> Struct_sctp_sack_info { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_assoc_value {
    pub assoc_id: sctp_assoc_t,
    pub assoc_value: uint32_t,
}
impl ::std::default::Default for Struct_sctp_assoc_value {
    fn default() -> Struct_sctp_assoc_value {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_paddrinfo {
    pub spinfo_assoc_id: sctp_assoc_t,
    pub spinfo_address: Struct_sockaddr_storage,
    pub spinfo_state: __s32,
    pub spinfo_cwnd: __u32,
    pub spinfo_srtt: __u32,
    pub spinfo_rto: __u32,
    pub spinfo_mtu: __u32,
}
impl ::std::default::Default for Struct_sctp_paddrinfo {
    fn default() -> Struct_sctp_paddrinfo { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_sctp_spinfo_state = ::libc::c_uint;
pub const SCTP_INACTIVE: ::libc::c_uint = 0;
pub const SCTP_ACTIVE: ::libc::c_uint = 1;
pub const SCTP_UNCONFIRMED: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_status {
    pub sstat_assoc_id: sctp_assoc_t,
    pub sstat_state: __s32,
    pub sstat_rwnd: __u32,
    pub sstat_unackdata: __u16,
    pub sstat_penddata: __u16,
    pub sstat_instrms: __u16,
    pub sstat_outstrms: __u16,
    pub sstat_fragmentation_point: __u32,
    pub sstat_primary: Struct_sctp_paddrinfo,
}
impl ::std::default::Default for Struct_sctp_status {
    fn default() -> Struct_sctp_status { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_authchunks {
    pub gauth_assoc_id: sctp_assoc_t,
    pub gauth_number_of_chunks: __u32,
    pub gauth_chunks: *mut uint8_t,
}
impl ::std::default::Default for Struct_sctp_authchunks {
    fn default() -> Struct_sctp_authchunks { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_sctp_sstat_state = ::libc::c_uint;
pub const SCTP_EMPTY: ::libc::c_uint = 0;
pub const SCTP_CLOSED: ::libc::c_uint = 1;
pub const SCTP_COOKIE_WAIT: ::libc::c_uint = 2;
pub const SCTP_COOKIE_ECHOED: ::libc::c_uint = 3;
pub const SCTP_ESTABLISHED: ::libc::c_uint = 4;
pub const SCTP_SHUTDOWN_PENDING: ::libc::c_uint = 5;
pub const SCTP_SHUTDOWN_SENT: ::libc::c_uint = 6;
pub const SCTP_SHUTDOWN_RECEIVED: ::libc::c_uint = 7;
pub const SCTP_SHUTDOWN_ACK_SENT: ::libc::c_uint = 8;
pub enum Struct_sockaddr { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_getaddrs_old {
    pub assoc_id: sctp_assoc_t,
    pub addr_num: ::libc::c_int,
    pub addrs: *mut Struct_sockaddr,
}
impl ::std::default::Default for Struct_sctp_getaddrs_old {
    fn default() -> Struct_sctp_getaddrs_old {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_getaddrs {
    pub assoc_id: sctp_assoc_t,
    pub addr_num: __u32,
    pub addrs: [__u8; 0us],
}
impl ::std::default::Default for Struct_sctp_getaddrs {
    fn default() -> Struct_sctp_getaddrs { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sctp_assoc_stats {
    pub sas_assoc_id: sctp_assoc_t,
    pub sas_obs_rto_ipaddr: Struct_sockaddr_storage,
    pub sas_maxrto: __u64,
    pub sas_isacks: __u64,
    pub sas_osacks: __u64,
    pub sas_opackets: __u64,
    pub sas_ipackets: __u64,
    pub sas_rtxchunks: __u64,
    pub sas_outofseqtsns: __u64,
    pub sas_idupchunks: __u64,
    pub sas_gapcnt: __u64,
    pub sas_ouodchunks: __u64,
    pub sas_iuodchunks: __u64,
    pub sas_oodchunks: __u64,
    pub sas_iodchunks: __u64,
    pub sas_octrlchunks: __u64,
    pub sas_ictrlchunks: __u64,
}
impl ::std::default::Default for Struct_sctp_assoc_stats {
    fn default() -> Struct_sctp_assoc_stats {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_sctp_msg_flags = ::libc::c_uint;
pub const MSG_NOTIFICATION: ::libc::c_uint = 32768;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub associd: sctp_assoc_t,
    pub sd: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Struct_Unnamed6 { unsafe { ::std::mem::zeroed() } }
}
pub type sctp_peeloff_arg_t = Struct_Unnamed6;
#[link(name = "sctp")]
extern "C" {
    pub fn sctp_bindx(sd: ::libc::c_int, addrs: *mut Struct_sockaddr,
                      addrcnt: ::libc::c_int, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sctp_connectx(sd: ::libc::c_int, addrs: *mut Struct_sockaddr,
                         addrcnt: ::libc::c_int, id: *mut sctp_assoc_t)
     -> ::libc::c_int;
    pub fn sctp_peeloff(sd: ::libc::c_int, assoc_id: sctp_assoc_t)
     -> ::libc::c_int;
    pub fn sctp_opt_info(sd: ::libc::c_int, id: sctp_assoc_t,
                         opt: ::libc::c_int, arg: *mut ::libc::c_void,
                         size: *mut socklen_t) -> ::libc::c_int;
    pub fn sctp_getpaddrs(sd: ::libc::c_int, id: sctp_assoc_t,
                          addrs: *mut *mut Struct_sockaddr) -> ::libc::c_int;
    pub fn sctp_freepaddrs(addrs: *mut Struct_sockaddr) -> ::libc::c_int;
    pub fn sctp_getladdrs(sd: ::libc::c_int, id: sctp_assoc_t,
                          addrs: *mut *mut Struct_sockaddr) -> ::libc::c_int;
    pub fn sctp_freeladdrs(addrs: *mut Struct_sockaddr) -> ::libc::c_int;
    pub fn sctp_sendmsg(s: ::libc::c_int, msg: *const ::libc::c_void,
                        len: size_t, to: *mut Struct_sockaddr,
                        tolen: socklen_t, ppid: uint32_t, flags: uint32_t,
                        stream_no: uint16_t, timetolive: uint32_t,
                        context: uint32_t) -> ::libc::c_int;
    pub fn sctp_send(s: ::libc::c_int, msg: *const ::libc::c_void,
                     len: size_t, sinfo: *const Struct_sctp_sndrcvinfo,
                     flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sctp_recvmsg(s: ::libc::c_int, msg: *mut ::libc::c_void,
                        len: size_t, from: *mut Struct_sockaddr,
                        fromlen: *mut socklen_t,
                        sinfo: *mut Struct_sctp_sndrcvinfo,
                        msg_flags: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sctp_getaddrlen(family: sa_family_t) -> ::libc::c_int;
}
